{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppComponent","schemaJson","errorMessage","schema","JSON","parse","toString","err","console","log","schemaJsonChange","formErrorChange","selector","templateUrl","styleUrls","AppModule","provide","useClass","forRoot","declarations","imports","providers","bootstrap","environment","production","bootstrapModule","error"],"mappings":";;;;;;;;;AAAA,aAASA,wBAAT,CAAkCC,GAAlC,EAAuC;AACtC;AACA;AACA,aAAOC,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,YAAW;AACxC,YAAIC,CAAC,GAAG,IAAIC,KAAJ,CAAU,yBAAyBL,GAAzB,GAA+B,GAAzC,CAAR;AACAI,SAAC,CAACE,IAAF,GAAS,kBAAT;AACA,cAAMF,CAAN;AACA,OAJM,CAAP;AAKA;;AACDL,4BAAwB,CAACQ,IAAzB,GAAgC,YAAW;AAAE,aAAO,EAAP;AAAY,KAAzD;;AACAR,4BAAwB,CAACG,OAAzB,GAAmCH,wBAAnC;AACAS,UAAM,CAACC,OAAP,GAAiBV,wBAAjB;AACAA,4BAAwB,CAACW,EAAzB,GAA8B,yCAA9B;;;;;;;;ACZA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACEI;;AAAmF;;AAAgB;;;;;;AAAhB;;AAAA;;;;;;AAKnF;;AACE;;AAAI;;AAAK;;AACT;;AAAK;;;;AAAgB;;AACvB;;;;;;AADO;;AAAA;;;;QDDEC,Y;;;;;;;eAMX,0BAAiBC,UAAjB,EAAqC;AACnC,eAAKC,YAAL,GAAoB,IAApB;;AACA,cAAI;AACF,iBAAKC,MAAL,GAAcC,IAAI,CAACC,KAAL,CAAWJ,UAAX,CAAd;AACD,WAFD,CAEE,OAAOR,CAAP,EAAU;AACV,iBAAKS,YAAL,GAAoBT,CAAC,CAACa,QAAF,EAApB;AACD;AACF;;;eAED,yBAAgBC,GAAhB,EAAqB;AACnBC,iBAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,eAAKL,YAAL,GAAoB,KAApB;AACD;;;;;;;uBAlBUF,Y;AAAY,K;;;YAAZA,Y;AAAY,+B;AAAA,c;AAAA,a;AAAA,4Z;AAAA;AAAA;ACRzB;;AACE;;AACE;;AACA;;AAAiC;AAAA,mBAAiB,IAAAU,gBAAA,QAAjB;AAAyC,WAAzC;;AAAyE;;AAC5G;;AACA;;AACE;;AAAiD;AAAA;AAAA,aAAiC,gBAAjC,EAAiC;AAAA,mBAAmB,IAAAC,eAAA,QAAnB;AAA0C,WAA3E;;AAA6E;;AAC9H;;AAIF;;AACF;;;;AAVkE;;AAAA;;AACpD;;AAAA;;AAGqB;;AAAA;;AAC1B;;AAAA;;;;;;;;;;sEDCIX,Y,EAAY;cALxB,uDAKwB;eALd;AACTY,kBAAQ,EAAE,UADD;AAETC,qBAAW,EAAE,sBAFJ;AAGTC,mBAAS,EAAE,CAAC,qBAAD;AAHF,S;AAKc,Q;;;;;;;;;;AERzB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAmBaC,S;;;;;YAAAA,S;AAAS,kBAFR,2DAEQ;;;;yBAATA,S;AAAS,O;AAAA,iBAHT,CAAC;AAAEC,eAAO,EAAE,8DAAX;AAA2BC,gBAAQ,EAAE;AAArC,OAAD,C;AAA8D,gBALhE,CACP,uEADO,EAEP,0DAFO,EAGP,iEAAiBC,OAAjB,EAHO,CAKgE;;;;0HAG9DH,S,EAAS;AAAA,uBAVlB,2DAUkB;AAVN,kBAGZ,uEAHY,EAIZ,0DAJY,EAID,gEAJC;AAUM,O;AANP,K;;;;;sEAMFA,S,EAAS;cAZrB,sDAYqB;eAZZ;AACRI,sBAAY,EAAE,CACZ,2DADY,CADN;AAIRC,iBAAO,EAAE,CACP,uEADO,EAEP,0DAFO,EAGP,iEAAiBF,OAAjB,EAHO,CAJD;AASRG,mBAAS,EAAE,CAAC;AAAEL,mBAAO,EAAE,8DAAX;AAA2BC,oBAAQ,EAAE;AAArC,WAAD,CATH;AAURK,mBAAS,EAAE,CAAC,2DAAD;AAVH,S;AAYY,Q;;;;;;;;;;ACnBtB;AAAA;;;AAAA;AAAA;AAAA,O,CAAA;AACA;AACA;;;AAEO,QAAMC,WAAW,GAAG;AACzBC,gBAAU,EAAE;AADa,KAApB;AAIP;;;;;;;AAOA;;;;;;;;;ACfA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAMA,QAAI,sEAAYA,UAAhB,EAA4B;AAC1B;AACD;;AAED,gFAAyBC,eAAzB,CAAyC,yDAAzC,WACS,UAAAlB,GAAG;AAAA,aAAIC,OAAO,CAACkB,KAAR,CAAcnB,GAAd,CAAJ;AAAA,KADZ","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component } from '@angular/core';\nimport { ISchema } from 'ngx-schema-form';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  schemaJson: string;\n  errorMessage: string;\n  schema: ISchema;\n  value: any;\n\n  schemaJsonChange(schemaJson: string) {\n    this.errorMessage = null;\n    try {\n      this.schema = JSON.parse(schemaJson);\n    } catch (e) {\n      this.errorMessage = e.toString();\n    }\n  }\n\n  formErrorChange(err) {\n    console.log(err);\n    this.errorMessage = '123';\n  }\n}\n","<div style=\"display: flex\">\n  <div style=\"width: 50%\">\n    <div style=\"color: red; border: 1px solid red; padding: 20px\" *ngIf=\"errorMessage\">{{errorMessage}}</div>\n    <textarea [ngModel]=\"schemaJson\" (ngModelChange)=\"schemaJsonChange($event)\" rows=\"20\" style=\"width: 100%\"></textarea>\n  </div>\n  <div style=\"height: 100vh; overflow-y: auto; display: flex\">\n    <sf-form style=\"padding: 20px\" [schema]=\"schema\" (onChange)=\"value = $event.value\" (onErrorsChange)=\"formErrorChange($event)\"></sf-form>\n    <div *ngIf=\"value\">\n      <h4>Value</h4>\n      <pre>{{value | json}}</pre>\n    </div>\n  </div>\n</div>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { FormsModule } from '@angular/forms';\nimport { DefaultWidgetRegistry, SchemaFormModule, WidgetRegistry } from 'ngx-schema-form';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    SchemaFormModule.forRoot()\n  ],\n  providers: [{ provide: WidgetRegistry, useClass: DefaultWidgetRegistry }],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}